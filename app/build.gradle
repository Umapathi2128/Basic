apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.gm.basic"
        minSdkVersion 29
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    flavorDimensions "default"
    productFlavors {
        dev {
            buildConfigField "String", "base_url", "\"https://www.google.com/\""
            dimension "default"
        }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'

    implementation 'com.squareup.retrofit2:retrofit:2.7.2'
    implementation 'com.squareup.retrofit2:converter-gson:2.7.2'
    implementation 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.4.0'

    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'androidx.lifecycle:lifecycle-livedata:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-common-java8:2.2.0'

    // Room components
    implementation 'androidx.room:room-runtime:2.2.4'
    implementation 'androidx.room:room-ktx:2.2.4'
    kapt 'androidx.room:room-compiler:2.2.4'
    androidTestImplementation 'androidx.room:room-testing:2.2.4'

    implementation 'com.github.bumptech.glide:glide:4.11.0'
    kapt 'com.github.bumptech.glide:compiler:4.11.0'

//    implementation 'io.coil-kt:coil:0.9.1'

    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'com.google.android.gms:play-services-location:17.0.0'
    implementation 'com.google.maps.android:android-maps-utils:0.6.2'

    implementation 'com.github.goutham106:runtimepermission:0.2'

    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    implementation 'androidx.biometric:biometric:1.0.1'

    implementation 'androidx.paging:paging-runtime:2.1.2'
    testImplementation 'androidx.paging:paging-common:2.1.2'

}

def propFile = new File('demo.properties')
Properties props = new Properties()
// Check if the file exists
if (propFile.canRead()) {
    //Load the file
    props.load(new FileInputStream(propFile))
    // If we found the file lets read in all the keys and values and add those to the buildConfig section of our template.
    if (props != null) {
        android.buildTypes.all {
            buildType ->
                props.any {
                    property ->
                        buildType.buildConfigField "String", property.key, "\"${property.value}\""
                }
        }
    } else {
        throw new InvalidUserDataException('demo.properties found but some entries are missing')
    }
} else {
    // The properties file was not found
    throw new MissingResourceException('demo.properties not found')
}
